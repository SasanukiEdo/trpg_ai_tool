## ファイル構成

現在のプロジェクト (`trpg_ai_tool`) の主要なファイル構成は以下の通りです。UI関連 (`ui/`)、コアロジック関連 (`core/`)、データ関連 (`data/`) が分離されています。

```
trpg_ai_tool/
├── main.py              # アプリケーション起動スクリプト
│
├── core/                  # コアロジック (UI非依存)
│   ├── config_manager.py      # 設定 (config.json) の読み書き
│   ├── data_manager.py        # ユーザーデータ (userdata/*.json) の読み書き・管理
│   ├── gemini_handler.py      # Gemini API との通信
│   └── subprompt_manager.py   # サブプロンプト (subprompts_v2.json) の読み書き
│
├── ui/                    # UI関連
│   ├── main_window.py         # メインウィンドウ、全体のレイアウト、UI部品間の連携
│   │                          # (SubPromptItemWidgetクラスを含む)
│   ├── data_widget.py         # データ管理エリアのUIとロジック (タブ、リスト表示)
│   ├── detail_window.py       # データ詳細表示・編集用の別ウィンドウ
│   ├── settings_dialog.py     # 設定ダイアログ
│   ├── subprompt_dialog.py    # サブプロンプト追加・編集ダイアログ
│   └── data_item_widget.py    # データリストの各項目用カスタムウィジェット
│
└── data/                  # データファイル保存場所
    ├── config.json          # APIキー、デフォルトモデルなどの設定
    ├── subprompts_v2.json   # サブプロンプトデータ
    └── userdata/            # ユーザーデータ用フォルダ
        ├── (カテゴリ名).json  # 例: キャラクター.json, アイテム.json
        └── ...
```


## 実装済みの仕様

当初の目標を含め、現在までに以下の機能が実装されています。

*   **基本UI**:
    *   左右分割のメインウィンドウレイアウト。
    *   ユーザー入力欄、AI応答履歴表示、送信ボタン。
    *   右側の設定ボタン、サブプロンプト管理エリア、データ管理エリアの配置（上下分割）。
*   **Gemini API連携**:
    *   APIキーとデフォルトモデルの設定・保存 (`data/config.json`)。
    *   設定に基づいたAPIクライアント初期化。
    *   ユーザー入力、メインシステムプロンプト、選択されたサブプロンプト、選択されたデータ情報を結合してAPIに送信。
    *   API応答の表示とエラーハンドリング（一部）。
    *   API通信処理のモジュール化 (`core/gemini_handler.py`)。
*   **サブシステムプロンプト管理**:
    *   カテゴリ別のタブ形式UI。
    *   リスト項目に行クリックでのチェックボックス切り替え、編集ボタン、削除ボタンを配置。
    *   サブプロンプトの追加・編集・削除機能（ダイアログ経由）。
    *   チェックされたサブプロンプト内容のプロンプトへの自動組み込み。
    *   データ保存 (`data/subprompts_v2.json`)。
*   **データ管理 (キャラクター、アイテムなど)**:
    *   カテゴリ別のタブ形式UI。
    *   リスト項目に行クリックでのチェックボックス切り替え、詳細表示ボタンを配置。
    *   カテゴリ追加、アイテム追加、チェックしたアイテムの一括削除機能。
    *   詳細表示ボタンまたはチェック時に、別ウィンドウ (`DetailWindow`) で詳細情報を表示・編集。
        *   詳細ウィンドウはメインウィンドウの右隣に位置・サイズを合わせて表示。
        *   表示/編集項目: ID(読取専用)、名前、説明/メモ(ステータス等自由記述)、タグ、画像パス、履歴(表示・追加)。
        *   変更保存機能。
    *   チェックされたデータアイテムの情報（名前、説明/メモ）のプロンプトへの自動組み込み。
    *   データ保存 (`data/userdata/(カテゴリ名).json`)。
    *   データ管理ロジックのモジュール化 (`core/data_manager.py`)。
*   **コード構成**:
    *   UI (`ui/`) とコアロジック (`core/`) の分離。
    *   設定、サブプロンプト、データ、API処理の各ロジックをモジュール化。
    *   主要なUI部品（データ管理ウィジェット、詳細ウィンドウ、アイテムウィジェット等）のファイル分割。

## 未実装の仕様・今後の課題

現時点で実装されていない、または改善の余地がある項目です。

*   **AI連携の強化**:
    *   データアイテムのタグに基づいた関連情報の自動プロンプト組み込み。
    *   AIによる「説明/メモ」欄の更新・要約機能。
    *   AIによる「履歴」の自動追記機能。
    *   AIによるデータ更新結果の検証・修正補助。
*   **データ管理機能の強化**:
    *   カテゴリの削除・リネーム機能。
    *   アイテムリストの検索・フィルタリング。
    *   画像パスからの画像プレビュー表示。
*   **他のAIモデルへの対応**:
    *   Claude、ChatGPTなどのAPIサポート。
    *   複数APIキー管理、モデル選択UIの拡張。
    *   共通APIインターフェースの設計・実装。
*   **UI/UX改善**:
    *   詳細ウィンドウとメインウィンドウ間の連携強化（例: ウィンドウを閉じたらチェックを外す等）。
    *   UIデザイン全体の洗練、アイコンの統一など。
    *   より親切なエラーメッセージやユーザーガイド。
    *   プロンプトへの情報組み込み方法のカスタマイズ性向上。

---
ここまでで、当初の目標であった「サブプロンプトのパーツ化」と「キャラクター等の情報保存・参照」の基本機能は実装できました。UIも改善され、コードの整理も進みました。


## データ管理機能の仕様案
JSONファイルで管理。
ファイルはカテゴリごとに分ける。キャラクターだけではなく、アイテムやクエストの情報など、様々な管理に使えるよう汎用性を持たせたいと思っています。
【管理項目】
- カテゴリ
- 固定情報：キャラクターのステータスやアイテムの性能、クエストの依頼内容など、固定情報を記録します。
- 履歴情報：キャラクターの思い出や、クエストの進捗情報など、順次追加されていく情報を記録します。
- タグ：タグ付けをすることで、ほかの関連情報と連動できるようにします。タグは区切り文字を使って複数登録できるようにします。
- 画像：画像ファイルを指定することで、キャラクター画像をUIの背景などに表示できるようにします。
【AIとの連携について】
- 選択した情報と、タグ付けされた関連情報をプロンプトに含める。
- AIに固定情報や追加情報を更新してもらう機能を付ける。
  - 固定情報の場合：今登録されている情報に合わせて、現在の情報をまとめなおし、情報を更新してもらう。キャラクターステータスの更新などに利用したい。
  - 履歴情報の場合：今登録されている情報に追加する形で、情報を更新してもらう。

