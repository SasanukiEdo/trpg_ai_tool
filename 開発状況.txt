## 開発環境
OS：Windows11
開発言語：Python 3.10.6
開発ツール：Visual Studio Code



## 実装済みの仕様

当初の目標を含め、現在までに以下の機能が実装されています。

*   **基本UI**:
    *   左右分割のメインウィンドウレイアウト。
    *   ユーザー入力欄、AI応答履歴表示、送信ボタン。
    *   右側の設定ボタン、サブプロンプト管理エリア、データ管理エリアの配置（上下分割）。
*   **Gemini API連携**:
    *   APIキーとデフォルトモデルの設定・保存 (`data/config.json`)。
    *   設定に基づいたAPIクライアント初期化。
    *   ユーザー入力、メインシステムプロンプト、選択されたサブプロンプト、選択されたデータ情報を結合してAPIに送信。
    *   API応答の表示とエラーハンドリング（一部）。
    *   API通信処理のモジュール化 (`core/gemini_handler.py`)。
*   **サブシステムプロンプト管理**:
    *   カテゴリ別のタブ形式UI。
    *   リスト項目に行クリックでのチェックボックス切り替え、編集ボタン、削除ボタンを配置。
    *   サブプロンプトの追加・編集・削除機能（ダイアログ経由）。
    *   チェックされたサブプロンプト内容のプロンプトへの自動組み込み。
    *   データ保存 (`data/subprompts_v2.json`)。
*   **データ管理 (キャラクター、アイテムなど)**:
    *   カテゴリ別のタブ形式UI。
    *   リスト項目に行クリックでのチェックボックス切り替え、詳細表示ボタンを配置。
    *   カテゴリ追加、アイテム追加、チェックしたアイテムの一括削除機能。
    *   詳細表示ボタンまたはチェック時に、別ウィンドウ (`DetailWindow`) で詳細情報を表示・編集。
        *   詳細ウィンドウはメインウィンドウの右隣に位置・サイズを合わせて表示。
        *   表示/編集項目: ID(読取専用)、名前、説明/メモ(ステータス等自由記述)、タグ、画像パス、履歴(表示・追加)。
        *   変更保存機能。
    *   チェックされたデータアイテムの情報（名前、説明/メモ）のプロンプトへの自動組み込み。
    *   データ保存 (`data/userdata/(カテゴリ名).json`)。
    *   データ管理ロジックのモジュール化 (`core/data_manager.py`)。
    *   **AIによる「説明/メモ」欄の更新・要約機能**:
        *   詳細ウィンドウの「説明/メモ」の下に「AIで説明/メモを編集...」ボタンを配置。
        *   ボタンクリックで `AIAssistedEditDialog` が表示される。
        *   ダイアログ上部にはAIへの指示入力欄（プロンプトテンプレートが初期表示）、下部にはAIの提案表示欄を配置。
        *   「AIに提案を依頼」ボタンで、上部の指示に基づきAIに処理を依頼し、結果を下部に表示。
        *   ユーザーはAIの提案を確認・編集し、OKボタンで詳細ウィンドウの「説明/メモ」欄に反映・保存。
        *   ダイアログのサイズ調整（指示入力欄、提案表示欄ともに）。
*   **コード構成**:
    *   UI (`ui/`) とコアロジック (`core/`) の分離。
    *   設定、サブプロンプト、データ、API処理の各ロジックをモジュール化。
    *   主要なUI部品（データ管理ウィジェット、詳細ウィンドウ、アイテムウィジェット等）のファイル分割。
    *   AI支援編集用ダイアログ (`AIAssistedEditDialog`) を `ui/ai_text_edit_dialog.py` に実装。
*   **APIキー管理**:
    *   APIキーを `config.json` から削除し、OSの資格情報ストア（`keyring` ライブラリ経由）に安全に保存・取得するように変更。
    *   設定ダイアログでAPIキーの保存・削除、状態表示を行うようにUIを修正。
    *   サブプロンプトごとのAPIキー設定を廃止。
*   **プロジェクト管理**:
    *   アクティブプロジェクトの選択・切り替え機能（UI対応）。
    *   新規プロジェクトの作成機能（UI対応、初期ファイル群の自動生成）。
    *   プロジェクトの表示名変更時のUI表示更新。
    *   アクティブプロジェクトの削除機能（UI対応、関連ファイル群の完全削除）。
*   **サブプロンプト機能の改善**:
    *   使用モデル選択で「(プロジェクト設定のモデルを使用)」という空白選択肢を追加。これが選択された場合、AI送信時にプロジェクト設定のモデルが使用される。
    *   選択可能なAIモデルのリストを、ルートの `config.json` 内の `"available_models"` で一元管理するように変更。
    *   `SubPromptEditDialog` と `SettingsDialog` のモデル選択コンボボックスが、この共通リストを参照するように変更。
*   **バグ修正**:
    *   データ管理ウィジェットの「カテゴリ追加」「アイテム追加」ボタンが機能しない問題を修正（シグナル接続漏れ）。


## 未実装の仕様・今後の課題

現時点で実装されていない、または改善の余地がある項目です。
*   **AI連携の強化**:
    *   **AIによる「説明/メモ」欄更新・要約機能の改善**（優先度低）:
        *   プロンプトテンプレートのさらなる最適化（AIがより意図を汲み取りやすいように）。
        *   ユーザーがテンプレート自体を編集・保存できる機能（より高度なカスタマイズ）。
        *   AIの提案が気に入らなかった場合に、簡単に元に戻す（Undo）機能。
    *   データアイテムのタグに基づいた関連情報の自動プロンプト組み込み。
    *   AIによる「履歴」の自動追記機能。
    *   AIによるデータ更新結果の検証・修正補助。
    *   NPCの「秘密」機能の実装（昨日のアイデア）。
*   **データ管理機能の強化**:
    *   カテゴリの削除・リネーム機能。（優先度低）
    *   アイテムリストの検索・フィルタリング。
    *   画像パスからの画像プレビュー表示の安定化・高画質化。
*   **他のAIモデルへの対応**:
    *   Claude、ChatGPTなどのAPIサポート。（`core/gemini_handler.py` を参考に、共通インターフェースとモデル別ハンドラーを作成）。
    *   複数APIキー管理、モデル選択UIの拡張。
    *   共通APIインターフェースの設計・実装。
*   **UI/UX改善**:
    *   詳細ウィンドウとメインウィンドウ間の連携強化（例: 詳細ウィンドウを閉じたらアイテムのチェックを自動で外すなど）。
    *   UIデザイン全体の洗練、アイコンの統一、より直感的な操作性。
    *   より親切なエラーメッセージやツールチップ、ユーザーガイドの整備。
    *   プロンプトへの情報組み込み方法のカスタマイズ性向上（どの情報をプロンプトに含めるかユーザーが選択できるようにするなど）。
*   **安定性と堅牢性の向上**:
    *   さらなるエッジケースのテストとエラーハンドリング強化。
    *   パフォーマンスの最適化（特にデータ量が増えた場合）。

---


## データ管理機能の仕様
JSONファイルで管理。
ファイルはカテゴリごとに分ける。キャラクターだけではなく、アイテムやクエストの情報など、様々な管理に使えるよう汎用性を持たせたいと思っています。
【管理項目】
- カテゴリ
- 固定情報：キャラクターのステータスやアイテムの性能、クエストの依頼内容など、固定情報を記録します。
- 履歴情報：キャラクターの思い出や、クエストの進捗情報など、順次追加されていく情報を記録します。
- タグ：タグ付けをすることで、ほかの関連情報と連動できるようにします。タグは区切り文字を使って複数登録できるようにします。
- 画像：画像ファイルを指定することで、キャラクター画像をUIの背景などに表示できるようにします。
【AIとの連携について】
- 選択した情報と、タグ付けされた関連情報をプロンプトに含める。
- AIに固定情報や追加情報を更新してもらう機能を付ける。
  - 固定情報の場合：今登録されている情報に合わせて、現在の情報をまとめなおし、情報を更新してもらう。キャラクターステータスの更新などに利用したい。
  - 履歴情報の場合：今登録されている情報に追加する形で、情報を更新してもらう。

