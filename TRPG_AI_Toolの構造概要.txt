## TRPG AI Tool 現状の構造概要（2025/5/7）

### 1. 主要ディレクトリとファイル構成

現在のプロジェクト (`trpg_ai_tool`) の主要なファイル構成は以下の通りです。UI関連 (`ui/`)、コアロジック関連 (`core/`)、データ関連 (`data/`) が分離されています。

*   `main.py`: アプリケーションのエントリーポイント。
*   `README.md`: プロジェクトの基本的な説明が記述されるファイル。
*   `.gitattributes`: Gitの属性を設定するファイル。
*   `開発状況.txt`: 開発の進捗やメモが記述されるファイル。
*   `TRPG_AI_Toolの構造概要.txt`: このファイル自体。プロジェクトの構造を記述。
*   `core/`: アプリケーションのコアロジック。
    *   `api_key_manager.py`: APIキー管理。
    *   `config_manager.py`: グローバル設定とプロジェクト設定の管理。
    *   `data_manager.py`: アイテムデータの読み書き、タグによるアイテム検索機能。
    *   `gemini_handler.py`: Gemini APIとのチャット形式の対話を管理。
    *   `gemini_handler2.py`: (おそらく) Gemini API関連の別の機能または実験的なコード。
    *   `shared_instances.py`: アプリケーション全体で共有されるインスタンス参照を保持・提供するモジュール。
    *   `subprompt_manager.py`: サブプロンプトデータの読み書き。
    *   `__pycache__/`: Pythonのコンパイル済みバイトコードが格納されるディレクトリ。
*   `ui/`: PyQt5ベースのUI関連ファイル。
    *   `main_window.py`: メインウィンドウ。
    *   `settings_dialog.py`: 設定ダイアログ。
    *   `subprompt_dialog.py`: サブプロンプト編集ダイアログ。
    *   `data_widget.py`: データ管理エリア。
    *   `detail_window.py`: アイテム詳細表示・編集ウィンドウ。
    *   `ai_text_edit_dialog.py`: AI支援編集ダイアログ。
    *   `data_item_widget.py`: データアイテム表示用のウィジェット。
    *   `prompt_preview_dialog.py`: プロンプトプレビューダイアログ。
    *   `style.qss`: アプリケーション全体のUIスタイルを定義する外部CSSファイル。
    *   `__pycache__/`: Pythonのコンパイル済みバイトコードが格納されるディレクトリ。
*   `data/`: 各プロジェクトのデータを格納するディレクトリ。
    *   `config.json`: グローバルな設定ファイル。
    *   `default_project/`: デフォルトプロジェクトのデータディレクトリ。
    *   `Air_TRPG/`, `ricorico/`, `dm_test_project/`, `test/` など: 各プロジェクトのデータディレクトリ。
        *   (各プロジェクトディレクトリ内には、`project_settings.json`, `subprompts.json`, `gamedata/`, `images/`, `chat_history.json` などが含まれる想定)
*   `.git/`: Gitリポジトリ関連のファイルが格納されるディレクトリ。
*   `__pycache__/`: Pythonのコンパイル済みバイトコードが格納されるディレクトリ（プロジェクトルートにも存在する場合がある）。


### 2. 主要な処理フロー

*   **起動時**:
    1.  `main.py` が `ui/style.qss` を読み込み、アプリケーションに適用。`ui/main_window.py` の `MainWindow` をインスタンス化。
    2.  `MainWindow.__init__` (in `ui/main_window.py`) が `_initialize_configs_and_project` を呼び出し、アクティブプロジェクトの情報をロード (`core/config_manager.py` を利用)。
    3.  `_initialize_chat_handler` (in `ui/main_window.py`) を呼び出し、現在のプロジェクトのモデル名、プロジェクトディレクトリ名、システム指示を渡して `core/gemini_handler.py` の `GeminiChatHandler` を初期化。
        *   `GeminiChatHandler` はコンストラクタ内で、指定されたプロジェクトの `data/{project_dir_name}/chat_history.json` から「純粋な会話履歴」を読み込む。
    4.  `init_ui` (in `ui/main_window.py`) でUIを構築。
    5.  `configure_gemini_and_chat_handler` (in `ui/main_window.py`) でAPIキー設定を確認 (`core/api_key_manager.py` 利用)、必要ならハンドラを再設定。
    6.  `_redisplay_chat_history` (in `ui/main_window.py`) を呼び出し、読み込んだ会話履歴を `response_display` に表示。
*   **プロジェクト選択/切り替え時 (`_switch_project` in `ui/main_window.py`)**:
    1.  現在のプロジェクトのチャット履歴を `GeminiChatHandler.save_current_history_on_exit()` (`core/gemini_handler.py`) で保存。
    2.  `current_project_dir_name` を更新し、新しいプロジェクトのデータをロード (`core/config_manager.py`, `core/data_manager.py`, `core/subprompt_manager.py` を利用)。
    3.  `GeminiChatHandler.update_settings_and_restart_chat()` (または `_initialize_chat_handler`) (`core/gemini_handler.py`) を呼び出し、新しいプロジェクトのモデル名、システム指示、新しいプロジェクトディレクトリ名、現在の送信履歴範囲設定を渡す。
        *   `GeminiChatHandler` は、新しいプロジェクトの `chat_history.json` から履歴を読み込む。
    4.  `_redisplay_chat_history` (in `ui/main_window.py`) を呼び出し、新しいプロジェクトの会話履歴を `response_display` に表示。
*   **新規プロジェクト作成**:
    1.  ユーザーが `MainWindow` (in `ui/main_window.py`) の「新規作成」ボタンをクリック。
    2.  `_on_new_project_button_clicked` (in `ui/main_window.py`) がプロジェクト表示名とディレクトリ名を入力するダイアログを表示。
    3.  `_validate_and_create_project` (in `ui/main_window.py`) が入力を検証（重複・命名規則チェック）。
    4.  `core/config_manager.save_project_settings` (デフォルト設定で)、`core/subprompt_manager.save_subprompts` (空データで)、`core/data_manager.ensure_project_images_dir_exists` および `core/data_manager.create_category` (デフォルトの `images/` ディレクトリと「キャラクター」カテゴリ作成) を呼び出し、初期ファイル群 (`data/{new_project_name}/` 以下に作成) を作成。
    5.  作成されたプロジェクトを `_switch_project` (in `ui/main_window.py`) でアクティブ化し、プロジェクト選択コンボボックスを `_populate_project_selector` (in `ui/main_window.py`) で更新。
*   **プロジェクト削除**:
    1.  ユーザーが `MainWindow` (in `ui/main_window.py`) の「削除」ボタンをクリック。
    2.  `_on_delete_project_button_clicked` (in `ui/main_window.py`) が確認ダイアログを表示。
    3.  承認されると `core.config_manager.delete_project_directory` でプロジェクトディレクトリ (`data/{project_dir_name}/`) 全体を削除。
    4.  プロジェクト選択コンボボックスを更新し、別のプロジェクトをアクティブにするか、プロジェクトなしの状態にUIを更新 (`ui/main_window.py`)。
*   **AIとの対話 (`on_send_button_clicked` in `ui/main_window.py`)**:
    1.  一時的なコンテキスト情報（選択されたサブプロンプト、選択されたデータアイテム (`ui/data_widget.py` 経由)、タグ検索で見つかったアイテムの情報 (`core/data_manager.py` 利用)）を構築。
    2.  `GeminiChatHandler.send_message_with_context()` (`core/gemini_handler.py`) を呼び出し、一時コンテキスト、純粋なユーザー入力、現在の送信履歴範囲設定を渡す。
        *   `GeminiChatHandler` 内部では、`start_new_chat_session` が呼び出され、指定された範囲の「純粋な会話履歴」とシステム指示でチャットセッションを開始し、一時コンテキストとユーザー入力でメッセージを送信。
    3.  AIからの応答を受け取ったら、`GeminiChatHandler` (`core/gemini_handler.py`) は「純粋な会話履歴」を更新し、`chat_history.json` に保存。
    4.  `_redisplay_chat_history` (in `ui/main_window.py`) を呼び出し、更新された全履歴（新しいやり取りを含む）を `response_display` に再表示（編集・削除リンク付き）。
*   **応答履歴の編集・削除 (`_handle_history_link_clicked` in `ui/main_window.py`)**:
    1.  ユーザーが `response_display` (in `ui/main_window.py`) 内の「編集」または「削除」リンクをクリック。
    2.  リンクの `href` 属性からアクション、履歴インデックス、ロールを特定。
    3.  **編集**: `QInputDialog.getMultiLineText` で編集させ、`GeminiChatHandler._pure_chat_history` (`core/gemini_handler.py`) を更新し、ファイルに保存。
    4.  **削除**: 確認後、`GeminiChatHandler._pure_chat_history` (`core/gemini_handler.py`) から該当エントリを削除し、ファイルに保存。
    5.  いずれの場合も `_redisplay_chat_history` (in `ui/main_window.py`) で画面を再表示。

*   **アイテム詳細表示・編集**:
    1.  ユーザーが `DataManagementWidget` (in `ui/data_widget.py`) のアイテムリストからアイテムを選択。
    2.  `DataManagementWidget.show_detail_window` (in `ui/data_widget.py`) が `DetailWindow` (in `ui/detail_window.py`) を表示し、該当アイテムのデータをロード (`core/data_manager.py` 利用)。
    3.  ユーザーが `DetailWindow` (in `ui/detail_window.py`) で情報を編集し「保存」ボタンをクリック。
    4.  `DetailWindow.save_details` (in `ui/detail_window.py`) が `core.data_manager.update_item` を呼び出しデータを保存。`dataSaved` シグナルを発行。
*   **アイテム編集支援 (`DetailWindow._handle_ai_suggestion_request` in `ui/detail_window.py`)**:
    *   `GeminiChatHandler.generate_single_response()` (`core/gemini_handler.py`) 静的メソッドを使用し、チャット履歴に影響を与えずに単発のAI応答を取得。
    *   **AI支援による「説明/メモ」編集**:
        1.  ユーザーが `DetailWindow` (in `ui/detail_window.py`) の「AIで「説明/メモ」を編集支援」ボタンをクリック。
        2.  `_on_ai_update_description_clicked` (in `ui/detail_window.py`) が `AIAssistedEditDialog` (in `ui/ai_text_edit_dialog.py`) を「description」モードで起動。プロンプトテンプレートと現在の説明を渡す。
        3.  ユーザーがダイアログ内でAIに指示を出し、提案を編集して「OK」。
        4.  `DetailWindow` (in `ui/detail_window.py`) が最終テキストを取得し、`update_item` (`core/data_manager.py`) で保存。
    *   **AI支援による「履歴」追記**:
        1.  ユーザーが `DetailWindow` (in `ui/detail_window.py`) の「AIで履歴エントリを生成・追加」ボタンをクリック。
        2.  `add_history_entry_with_ai_ui` (in `ui/detail_window.py`) が `AIAssistedEditDialog` (in `ui/ai_text_edit_dialog.py`) を「history」モードで起動。プロンプトテンプレートと現在のアイテム情報を渡す。
        3.  ユーザーがダイアログ内でAIに指示を出し、提案を編集して「OK」。
        4.  `DetailWindow` (in `ui/detail_window.py`) が最終履歴エントリを取得し、`core.data_manager.add_history_entry` で保存（各履歴にIDが付与される）。UIが再ロードされ更新。
*   **履歴の編集・削除 (in `ui/detail_window.py`)**:
    1.  ユーザーが `DetailWindow` (in `ui/detail_window.py`) の「履歴を編集/削除」ボタンをクリック。
    2.  `edit_history_entry_ui` / `delete_history_entry_ui` (in `ui/detail_window.py`) が番号入力ダイアログを表示。
    3.  ユーザーが番号を指定し、編集の場合は `QInputDialog.getMultiLineText` で編集。
    4.  対応する履歴エントリを `item_data['history']` から編集/削除し、`update_item` (`core/data_manager.py`) で保存。UIが再ロードされ更新。
*   **画像選択とプレビュー (in `ui/detail_window.py`)**:
    1.  ユーザーが `DetailWindow` (in `ui/detail_window.py`) で「画像を選択」ボタンをクリック。
    2.  `select_image_file` (in `ui/detail_window.py`) がファイルダイアログを表示。
    3.  選択された画像ファイルは、プロジェクトの `images/` ディレクトリ (`data/{project_dir_name}/images/`) にファイル名を変更せずにコピーされる (`core/data_manager.py` の機能を利用する想定)。
    4.  アイテムデータの `image_path` には `images/ファイル名` という相対パスが保存される。
    5.  `_update_image_preview` (in `ui/detail_window.py`) が相対パスを解決し、初回表示時も適切なサイズで、かつウィンドウリサイズに追従する形で画像プレビューを表示する。

### 3. データフローと状態管理の詳細

*   **グローバル設定 (`MainWindow.global_config`)**: `data/config.json` から `core/config_manager.py` を介してロード。アクティブプロジェクト名 (`active_project`)、デフォルトAIモデル名などを保持。設定ダイアログ (`ui/settings_dialog.py`) 経由で更新・保存。
*   **プロジェクト設定 (`MainWindow.current_project_settings`)**: 現在アクティブなプロジェクトの `data/{project_dir_name}/project_settings.json` から `core/config_manager.py` を介してロード。表示名、使用モデル、メインシステムプロンプトなどを保持。設定ダイアログ (`ui/settings_dialog.py`) や `MainWindow` (in `ui/main_window.py`) のUI操作（メインプロンプト直接編集）で更新・保存。
*   **サブプロンプト (`MainWindow.subprompts`)**: 現在アクティブなプロジェクトの `data/{project_dir_name}/subprompts.json` から `core/subprompt_manager.py` を介してロード。カテゴリ別のサブプロンプトデータを保持。サブプロンプト編集ダイアログ (`ui/subprompt_dialog.py`) 経由で更新・保存。チェック状態は `MainWindow.checked_subprompts` (in `ui/main_window.py`) で管理。
*   **アイテムデータ (`DetailWindow.item_data` in `ui/detail_window.py`)**: `DataManagementWidget` (in `ui/data_widget.py`) で選択されたアイテムのデータ。`core/data_manager.py` の `get_item` でロード。`DetailWindow` での編集後、`core/data_manager.py` の `update_item` で対応するJSONファイル (`data/{project_dir_name}/gamedata/{category_name}.json`) に保存。
    *   **`image_path`**: アイテムデータ内の画像パスは、プロジェクトルートからの相対パス（例: `images/character.png`）として保存される。
    *   **`history`**: アイテムデータ内の履歴はリスト形式で、各エントリは `{"id": "uuid-string", "timestamp": "YYYY-MM-DD HH:MM:SS", "entry": "内容"}` という辞書形式で保存される。タイムスタンプは内部データとして保持されるが、UI上ではデフォルト非表示。
*   **プロジェクト一覧の状態 (`MainWindow._projects_list_for_combo` in `ui/main_window.py`)**: `core/config_manager.list_project_dir_names()` と各プロジェクトの `project_settings.json` から読み取った表示名をタプル `(表示名, ディレクトリ名)` のリストとして保持し、プロジェクト選択コンボボックスの表示と選択処理に使用。
*   **UI間のデータ受け渡し**:
    *   `MainWindow` (in `ui/main_window.py`) はアクティブなプロジェクトの各種データを保持し、必要に応じて `DataManagementWidget` (in `ui/data_widget.py`) や `SettingsDialog` (in `ui/settings_dialog.py`) に渡す。
    *   `DataManagementWidget` (in `ui/data_widget.py`) は選択されたアイテムのカテゴリとIDを `DetailWindow` (in `ui/detail_window.py`) に渡す。
    *   ダイアログ（`SettingsDialog`, `SubPromptEditDialog`, `AIAssistedEditDialog` (in `ui/ai_text_edit_dialog.py`), `QInputDialog`）は、呼び出し元のウィジェットから初期データを受け取り、編集結果を返す。
*   **`GeminiChatHandler._pure_chat_history` (in `core/gemini_handler.py`)**: アプリケーションが管理する「純粋な会話履歴」（ユーザー発言とAI応答のリスト）。プロジェクトごとに `data/{project_dir_name}/chat_history.json` にJSON形式で永続化される。
*   **`MainWindow.current_history_range_for_prompt` (in `ui/main_window.py`)**: AIに送信する会話履歴の最大往復数を保持する整数値。UIのスライダーで設定され、`GeminiChatHandler` (in `core/gemini_handler.py`) に渡される。
*   システム指示（メインシステムプロンプト）: `GeminiChatHandler` (in `core/gemini_handler.py`) の `_system_instruction_text` として保持され、モデル初期化時に適用される。
*   一時的なコンテキスト情報（サブプロンプト、アイテムデータ、タグ関連情報）: `on_send_button_clicked` (in `ui/main_window.py`) で毎回構築され、`GeminiChatHandler.send_message_with_context` (in `core/gemini_handler.py`) に渡される。これらは永続的な会話履歴には含まれない。
*   スタイル情報: アプリケーション全体の基本スタイルは `ui/style.qss` からロード。応答履歴表示エリアのHTML内のスタイルも `ui/style.qss` で定義されたクラスに依存。

### 4. UIコンポーネント間の連携方法

*   **`MainWindow` (in `ui/main_window.py`) ⇔ `DataManagementWidget` (in `ui/data_widget.py`)**:
    *   `MainWindow` → `DataManagementWidget`: `set_project(project_dir_name)` で表示対象プロジェクトを指示。
    *   `DataManagementWidget` → `MainWindow`: `addCategoryRequested`, `addItemRequested` シグナルを発行し、`MainWindow` が `QInputDialog` を表示して結果を `DataManagementWidget` のメソッド (`add_new_category_result`, `add_new_item_result`) に渡す。
*   **`DataManagementWidget` (in `ui/data_widget.py`) ⇔ `DetailWindow` (in `ui/detail_window.py`)**:
    *   `DataManagementWidget` → `DetailWindow`: アイテムリストでアイテムが選択されると `show_detail_window(category, item_id)` で `DetailWindow` を表示・データロード。
    *   `DetailWindow` → `DataManagementWidget`: `dataSaved(category, item_id)` シグナルを発行し、`DataManagementWidget` がリスト表示を更新 (`_handle_detail_saved`)。
*   **`MainWindow` (in `ui/main_window.py`) ⇔ `SettingsDialog` (in `ui/settings_dialog.py`)**:
    *   `MainWindow` → `SettingsDialog`: 現在のグローバル設定 (`core/config_manager.py` 経由) とプロジェクト設定 (`core/config_manager.py` 経由) を渡してダイアログを初期化。
    *   `SettingsDialog` → `MainWindow`: ダイアログがAcceptedで閉じられたら、更新された設定データを返し、`MainWindow` が保存処理 (`core/config_manager.py` 利用) とUI更新（ウィンドウタイトル、メインプロンプト、プロジェクト選択コンボボックス）を行う。
*   **`MainWindow` (in `ui/main_window.py`) ⇔ `SubPromptEditDialog` (in `ui/subprompt_dialog.py`)**:
    *   `MainWindow` → `SubPromptEditDialog`: 初期データ（編集時）または空データを渡してダイアログを初期化。
    *   `SubPromptEditDialog` → `MainWindow`: ダイアログがAcceptedで閉じられたら、編集されたサブプロンプトデータを返し、`MainWindow` が保存処理 (`core/subprompt_manager.py` 利用) とサブプロンプトタブの更新を行う。
*   **`DetailWindow` (in `ui/detail_window.py`) ⇔ `AIAssistedEditDialog` (in `ui/ai_text_edit_dialog.py`)**:
    *   `DetailWindow` → `AIAssistedEditDialog`: プロンプトテンプレート、現在のアイテム情報（説明や履歴）、編集モード（"description" or "history"）を渡してダイアログを初期化。
    *   `AIAssistedEditDialog` 内の「AIに提案を依頼」ボタン → `DetailWindow._handle_ai_suggestion_request` (実際には `AIAssistedEditDialog` 内部で `core/gemini_handler.py` の `generate_single_response` を呼ぶ想定) を呼び出し、AIに応答を要求。
    *   `AIAssistedEditDialog` → `DetailWindow`: ダイアログがAcceptedで閉じられたら、最終的な編集テキストを返し、`DetailWindow` が保存処理 (`core/data_manager.py` 利用) とUI更新を行う。
*   **`MainWindow`/`DetailWindow` ⇔ `QInputDialog`**:
    *   新規プロジェクト作成時 (`ui/main_window.py`)、サブプロンプトカテゴリ追加時 (`ui/main_window.py`)、データカテゴリ追加時 (`ui/main_window.py` が `ui/data_widget.py` を介して)、アイテム追加時 (`ui/main_window.py` が `ui/data_widget.py` を介して)、履歴編集・削除時 (`ui/detail_window.py`) に、ユーザーからの簡単なテキスト入力や数値入力を受け付けるために使用。
*   **`MainWindow` (in `ui/main_window.py`) ⇔ `GeminiChatHandler` (in `core/gemini_handler.py`)**:
    *   `MainWindow` が `GeminiChatHandler` のインスタンスを生成・保持。
    *   `MainWindow` が `send_message_with_context` を呼び出してAIとの対話を実行。
    *   `MainWindow` が `get_pure_chat_history` を呼び出して表示用履歴を取得。
    *   `MainWindow` が `update_settings_and_restart_chat` や `clear_pure_chat_history`, `save_current_history_on_exit` を呼び出してハンドラの状態を制御。
*   **`MainWindow` (スライダー in `ui/main_window.py`) → `GeminiChatHandler` (in `core/gemini_handler.py`)**:
    *   スライダーの値 (`current_history_range_for_prompt`) が、`send_message_with_context` やセッション開始メソッドの引数を通じて `GeminiChatHandler` に渡され、送信する履歴の量を制御。
*   **`MainWindow` (`response_display` in `ui/main_window.py`) ⇔ `_handle_history_link_clicked` (in `ui/main_window.py`)**:
    *   `response_display` の `anchorClicked` シグナルが `_handle_history_link_clicked` スロットを呼び出す。
    *   `_handle_history_link_clicked` は `GeminiChatHandler` (in `core/gemini_handler.py`) の履歴を操作し、ファイルに保存後、`_redisplay_chat_history` (in `ui/main_window.py`) で `response_display` を更新。


### 5. UIデザインとレイアウトに関するメモ（現状と今後の改善点）

*   **現状のUIデザイン**:
    *   メインウィンドウ (`ui/main_window.py`) は左右2ペイン構成。
        *   左ペイン: メインシステムプロンプト入力、AI応答履歴表示 (`response_display`)、ユーザーメッセージ入力。
        *   `MainWindow` 左ペイン下部に、AIへの送信履歴範囲を設定するスライダーとラベルを追加。
        *   応答履歴表示エリア (`response_display`) は、外部CSSファイル (`ui/style.qss`) によってスタイルが適用され、各履歴エントリには編集・削除用のHTMLリンクが付与される。
        *   右ペイン:
            *   **プロジェクト管理セクション**: 「プロジェクト管理:」ラベルと「新規作成」「削除」「設定」ボタンのヘッダー、その下に「選択中のプロジェクト:」ラベルとプロジェクト選択コンボボックス (以上、主に `ui/main_window.py` で構成)。
            *   **サブシステムプロンプト管理セクション**: 「サブシステムプロンプト管理:」ラベルと「カテゴリ追加」「プロンプト追加」ボタンのヘッダー、その下にサブプロンプトカテゴリタブ (以上、主に `ui/main_window.py` で構成、編集は `ui/subprompt_dialog.py` が担当)。
            *   **アイテム管理セクション**: 「アイテム管理:」ラベルと「カテゴリ追加」「アイテム追加」「チェック削除」ボタンのヘッダー、その下にデータ管理ウィジェット (`ui/data_widget.py` が担当、アイテム表示は `ui/data_item_widget.py`、詳細は `ui/detail_window.py` が担当)。
            *   各セクション間には区切り線を挿入。
    *   アイテム詳細ウィンドウ (`ui/detail_window.py`):
        *   スクロール可能なエリアにアイテムの各属性（名前、説明/メモ、履歴、タグ、画像）の表示・編集フィールドを配置。
        *   履歴表示: 通し番号付き、各エントリ間に区切り線、タイムスタンプはUI上非表示。履歴操作ボタン（AI支援追加、編集、削除）を配置。
        *   画像プレビュー: ウィンドウ下部に表示。初回表示時も適切なサイズで表示され、ウィンドウリサイズに追従する。
    *   AI支援編集ダイアログは `ui/ai_text_edit_dialog.py`、プロンプトプレビューは `ui/prompt_preview_dialog.py` が担当。
*   **今後の改善点**:
    *   `DetailWindow` の画像表示について、現在のプレビュー表示と、**ウィンドウ全体の背景として画像を表示するモードを切り替えられるようにする機能**。
    *   全体的なアイコンの統一や、より洗練されたカラースキームの検討。
    *   エラーメッセージやツールチップの充実。
    *   長文になりがちなAI応答履歴表示エリアのスクロール性改善や検索機能（任意）。
    *   各リスト（サブプロンプト、アイテム）の検索・フィルタリング機能。
    *   コンテキストに含める履歴範囲設定を、プロジェクト設定として永続化する。



### 6. 依存ライブラリと外部API

*   **PyQt5**: GUIフレームワーク。
*   **google-generativeai**: Gemini APIとの連携用。
*   **keyring**: APIキーのOS資格情報ストアへのアクセス用。
*   **標準ライブラリ**: `json`, `os`, `uuid`, `datetime`, `shutil` (ファイル操作), `re` (正規表現利用の可能性) など。
